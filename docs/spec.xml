<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>AsciiSpec Specification</title>
<date>2017-01-30</date>
<author>
<personname>
<firstname>Numberfour</firstname>
<surname>AG</surname>
</personname>
</author>
<authorinitials>NA</authorinitials>
</info>
<preface>
<title></title>
<simpara>The following is the specification for AsciiSpec, a toolchain based on <link xl:href="http://asciidoctor.org/">Asciidoctor</link> with custom modifications for task management, math support, API documentation and more.</simpara>
</preface>
<chapter xml:id="_asciispec_cheat_sheet">
<title>AsciiSpec Cheat Sheet</title>
<informaltable role="language-adoc" frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="center" valign="top">Name</entry>
<entry align="center" valign="top">Source</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Task Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>task:taskId[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline BibTeX Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cite:[ref,ref2(optionalPage)]</literal></simpara>
<simpara><literal>bibliography::[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Cwiki Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cwiki:path[title=Hyperlinked Text]</literal></simpara>
<simpara><literal>cwiki:pageID[title=Hyperlinked Text]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Definition Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>.title</literal><?asciidoc-br?>
<literal>[def]</literal><?asciidoc-br?>
<literal>--</literal><?asciidoc-br?>
My Definition<?asciidoc-br?>
<literal>--</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Requirements Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>.This is the title</literal><?asciidoc-br?>
<literal>[req,id=RSL-3,version=1]</literal><?asciidoc-br?>
<literal>--</literal><?asciidoc-br?>
My Super Requirement<?asciidoc-br?>
<literal>--</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Extended Include</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>include::{find}myfile.adoc[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Source Link</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>srclnk:[DataList#&lt;sizes]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Math</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>math:E=mc^2[]</literal><?asciidoc-br?>
<literal>$C=2 \Pi r$</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Math Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>[math]</literal><?asciidoc-br?>
<literal>++++</literal><?asciidoc-br?>
<literal>\sum_{i=1}^n i = {n(n+1)\over{2}}</literal><?asciidoc-br?>
<literal>++++</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</chapter>
<chapter xml:id="_definition_block_documentation">
<title>Definition Block Documentation</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">.definitionTitle
[def]
--
The content of the definition
--</programlisting>
<variablelist>
<varlistentry>
<term>Attributes</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">definitionTitle</emphasis> (required): An anchor is derived from the definition title and embedded at the beginning of the rendered output.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">delimiter</emphasis>: Lines containing only two hyphens <literal>--</literal> delimit the block. This is required if the block contains empty lines or nested formatting.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Example</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">.Definition Site Structural Typing
[def]
--
If a type T is declared as structural at its definition, _T.defStructural_ is true.

1. The structurally defined type cannot be used on the right hand side of the `instanceof`
2. A type X is a subtype of a structurally defined type T...

Furthermore...
--</programlisting>
<variablelist>
<varlistentry>
<term>Result</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<simpara><anchor xml:id="definition_site_structural_typing" xreflabel="[definition_site_structural_typing]"/><emphasis role="strong">Definition:</emphasis> <link linkend="definition_site_structural_typing">Definition Site Structural Typing</link></simpara>
<simpara>If a type T is declared as structural at its definition, <emphasis>T.defStructural</emphasis> is true.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The structurally defined type cannot be used on the right hand side of the <literal>instanceof</literal></simpara>
</listitem>
<listitem>
<simpara>A type X is a subtype of a structurally defined type T&#8230;&#8203;</simpara>
</listitem>
</orderedlist>
<simpara>Furthermore&#8230;&#8203;</simpara>
</chapter>
<chapter xml:id="_requirements_block">
<title>Requirements Block</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">.title
[req,id=RSL-3,version=1]
--
Contents of the requirement
--</programlisting>
<variablelist>
<varlistentry>
<term>Attributes</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">title</emphasis> (required):  An anchor is derived from the requirement title and embedded at the beginning of the rendered output.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ID:</emphasis> (required) The ID in the form <emphasis role="strong">&lt;Prefix&gt;-&lt;Number&gt;</emphasis>, used to generate an anchor</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">version</emphasis>: (required) value is a non-negative integer.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<note>
<simpara>Omitting any of the above attributes will print an error to the console and insert a warning text in the generated document.
* <emphasis role="strong">delimiter</emphasis>: Lines containing only two hyphens <literal>--</literal> delimit the block. This is required if the block contains empty lines or nested formatting.</simpara>
</note>
<section xml:id="_id_pattern">
<title>ID Pattern</title>
<simpara>The purpose of the <literal>&lt;Prefix&gt;-&lt;Number&gt;</literal> ID is to ensure that Requirements are both unique and easily referenceable.
Currently, the ID may be any string, but should conform to the following conventions:</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="strong">&lt;Prefix&gt;</emphasis>: </term>
<listitem>
<simpara><literal>R</literal> (requirement) followed by the project prefix (i.e. <literal>SL</literal> for <literal>stdlib</literal>)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="strong">&lt;Number&gt;</emphasis>: </term>
<listitem>
<simpara>The requirement number, currently not validated.
A validation stage for requirement IDs (detecting duplicates, for instance) is planned.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Example</term>
<listitem>
<simpara>The following example demonstrates how to document Requirement #3 for stdlib Version 1;</simpara>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">.This is the title
[req,id=RSL-3,version=1]
--
My Super Requirement
--</programlisting>
<simpara><anchor xml:id="Req-RSL-3" xreflabel="[Req-RSL-3]"/><emphasis role="strong">Req. RSL-3:</emphasis> <link linkend="Req-RSL-3">This is the title</link> (ver. 1)</simpara>
<simpara>My Super Requirement</simpara>
</section>
</chapter>
<chapter xml:id="_inline_task_macro">
<title>Inline Task Macro</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">task:target[]</programlisting>
<simpara>The <literal>inline task macro</literal> creates hyperlinks to Jira task management and GitHub issue-tracking systems.</simpara>
<variablelist>
<varlistentry>
<term>Attributes</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">target:</emphasis> The project prefix followed by a hyphen and the task number or ID (e.g. <literal>AS-23</literal>).</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="_url_pattern" role="language-asciidoc">
<title>URL Pattern</title>
<simpara>Specifying which repository to link to is done by adding a URL pattern to the
<link xl:href="https://github.numberfour.eu/NumberFour/asciispec/blob/master/docs/userguide.adoc#configuration-file">config file</link> in the following format:</simpara>
<simpara><literal>:task_def_&lt;Prefix&gt;: &lt;Name&gt;;&lt;Description&gt;;&lt;URL-Pattern&gt;;&lt;Icon&gt;;&lt;TextPatterns&gt;</literal></simpara>
<variablelist>
<varlistentry>
<term>Example: </term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">:task_def_AS-: GitHub;AsciiSpec Bugs;https://github.com/NumberFour/asciispec/issues/{TASK_ID};images/icons/github.png;AS-{TASK_ID}
:task_def_JIRA-: Jira;My Jira Board;https://jira.myorg.com/browse/JIRA-{TASK_ID};images/icons/jira.png;JIRA-{TASK_ID}</programlisting>
<variablelist>
<varlistentry>
<term>&lt;Prefix&gt;</term>
<listitem>
<simpara>The unique prefix by which this repository is identified (<literal>AS-</literal> in <literal>task:AS-40[]</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Name&gt;</term>
<listitem>
<simpara>The name of the repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Description&gt;</term>
<listitem>
<simpara>A description of the repository, used to generated a tooltip.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;URL-Pattern&gt;</term>
<listitem>
<simpara>The pattern to generate in the links - can contain the following placeholders:<?asciidoc-br?></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><literal>{TASK_ID}</literal></emphasis>: The suffix of the macro target (<literal>40</literal> in <literal>task:AS-40[]</literal>).</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Icon&gt;</term>
<listitem>
<simpara>The relative path to an image used as an icon for the repository.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Text-Pattern&gt;</term>
<listitem>
<simpara>The text pattern to match to inline task macros in the AsciiDoc source - can also contain the <emphasis role="strong"><literal>{TASK_ID}</literal></emphasis> placeholder.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_examples" role="language-asciidoc">
<title>Examples</title>
<variablelist>
<varlistentry>
<term>Jira Task: </term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informalexample>
<simpara>AsciiDoc was decided as a suitable syntax for documentation <literal>task:JIRA-35[]</literal>.</simpara>
</informalexample>
<simpara>AsciiDoc was decided as a suitable syntax for documentation. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.myorg.com/browse/JIRA-35"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>JIRA-35</link></simpara>
</sidebar>
<simpara><?asciidoc-hr?></simpara>
<variablelist>
<varlistentry>
<term>Github Issue: </term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informalexample>
<simpara>A bug has already <literal>task:ASC-35[]</literal> been filed&#8230;&#8203;</simpara>
</informalexample>
<simpara>A bug has already been filed&#8230;&#8203; </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/asciispec/issues/35"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>AS-35</link></simpara>
</sidebar>
</section>
</chapter>
<chapter xml:id="_inline_bibtex_macro">
<title>Inline BibTex Macro</title>
<simpara>Load references from a BibTeX file.</simpara>
<simpara>Usage:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">cite:[ref(pages)]

bibliography::[]</programlisting>
<variablelist>
<varlistentry>
<term>Attributes: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">ref</emphasis> (required): At least one reference must be stated e.g. <literal>ECMA15a</literal>. Multiple references may be added by separating with commas e.g. <literal>ECMA15a,Canning89a</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">pages</emphasis> (optional): The specific pages of a reference.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Bibliography: </term>
<listitem>
<simpara>The bibliography macro can be added at any part of the source document, but the convention for block macros is to have empty lines before and after as follows:</simpara>
</listitem>
</varlistentry>
</variablelist>
<informaltable role="language-asciidoc" frame="all" rowsep="1" colsep="1">
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis>&#8230;&#8203;end of previous block</emphasis></simpara>
<simpara><literal>bibliography::[]</literal></simpara>
<simpara><emphasis>Beginning of next block&#8230;&#8203;</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry>
<term>Examples</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable role="language-asciidoc" frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>:bib-file: ../biblio.bib</literal></simpara>
<simpara>Two of my favourite books are the ECMAScript<?asciidoc-br?>
Language Specification and F-bounded<?asciidoc-br?>
polymorphism <literal>cite:[ECMA15a,Canning89a]</literal>.</simpara>
<simpara>Thanks for reading, be sure to check my biblio.</simpara>
<simpara><literal>[appendix]</literal><?asciidoc-br?>
<literal>== Bibliography</literal></simpara>
<simpara><literal>bibliography::[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Two of my favourite books are the ECMAScript Language Specification and F-bounded polymorphism <xref linkend="ECMA15a"/>; <xref linkend="Canning89a"/>.</simpara>
<simpara>Thanks for reading, be sure to read my biblio.</simpara>
<bridgehead xml:id="_bibliography" renderas="sect2">Bibliography</bridgehead>
<simpara><anchor xml:id="ECMA15a" xreflabel="[ECMA15a]"/> ECMA. (2015). ECMAScript 2015 Language Specification. Retrieved from <link xl:href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</link></simpara>
<simpara><anchor xml:id="Canning89a" xreflabel="[Canning89a]"/> Canning, Peter and Cook, William and Hill, Walter and Olthoff, Walter and Mitchell, John C.. (1989).
F-bounded Polymorphism for Object-oriented Programming. Retrieved from <link xl:href="http://doi.acm.org/10.1145/99370.99392">http://doi.acm.org/10.1145/99370.99392</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_configuration" role="language-bash">
<title>Configuration</title>
<simpara>The following line should be added to the <emphasis role="strong"><link xl:href="https://github.numberfour.eu/NumberFour/asciispec/blob/master/docs/examples/config.adoc">Configuration File</link></emphasis>:</simpara>
<simpara><literal role="language-asciidoc">:bib-file: &lt;path&gt;</literal></simpara>
<variablelist>
<varlistentry>
<term>Attributes: </term>
<listitem>
<simpara><literal>&lt;path&gt;</literal> can be an absolute path or a path relative to the location of the adoc file being processed.
In absence of this option, or if the file denoted by <literal>&lt;path&gt;</literal> cannot be found, the processor will try to find a <literal>.bib</literal> file in the directory tree beginning at the location of the adoc file recursively.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>
<chapter xml:id="_inline_cwiki_macro">
<title>Inline Cwiki Macro</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">cwiki:target[title="cwikiTitle"]</programlisting>
<simpara>The Inline Cwiki Macro creates hyperlinks to Confluence wiki entries.
The string 'title=' and the quotation marks are optional.</simpara>
<variablelist>
<varlistentry>
<term>Attributes</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">target:</emphasis> Used to define which Confluence URL to link to. Can be one of the following:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>pageID (e.g. <literal>56885484</literal>).</simpara>
</listitem>
<listitem>
<simpara>path (e.g. <literal>BR/Continuous+Integration</literal>).</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara><emphasis role="strong">cwikiTitle:</emphasis> (optional) The title that will be displayed as an anchor in the generated hyperlink.
If no title is declared, the <literal>target</literal> will be used instead.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="_url_pattern_2" role="language-asciidoc">
<title>URL Pattern</title>
<simpara>With most Confluence pages, the <emphasis role="strong">URL path</emphasis> is derived from the page title, like so:</simpara>
<simpara><literal>confluence.numberfour.eu/display/N4/Continuous+Integration</literal></simpara>
<simpara>Not all Confluence pages have associated paths and will otherwise have a <emphasis role="strong">page ID</emphasis> as with the following:</simpara>
<simpara><literal>confluence.numberfour.eu/pages/viewpage.action?pageId=56885484</literal></simpara>
<simpara>A target that contains only numbers (e.g., <literal>cwiki:1234[]</literal>) will be interpreted as a page ID rather than a page path.
To configure the Inline Cwiki Macro to resolve to correct targets, the format of the URL pattern should be set in the <emphasis role="strong"><link xl:href="https://github.numberfour.eu/NumberFour/asciispec/blob/master/docs/examples/config.adoc">Configuration File</link></emphasis> as follows:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:cwiki_def: &lt;Path-URL-Pattern&gt;;&lt;ID-URL-Pattern&gt;;&lt;Icon&gt;;&lt;Title-Pattern&gt;</programlisting>
<variablelist>
<varlistentry>
<term>&lt;Path-URL-Pattern&gt; </term>
<listitem>
<simpara>Used to generate the target URL when a path is specified - can contain the placeholder <literal>{PATH}</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;ID-URL-Pattern&gt; </term>
<listitem>
<simpara>Used to generate the link target URL when a page ID is specified - can contain the placeholder <literal>{PAGE_ID}</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Icon&gt; </term>
<listitem>
<simpara>A path to an icon, e.g., <literal>images/icons/confluence.png</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>&lt;Title-Pattern&gt; </term>
<listitem>
<simpara>the pattern used to generate the link&#8217;s text - can contain the placeholder <literal>{TITLE}</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Examples</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informalexample>
<simpara>Documented at <emphasis role="strong">cwiki:BR/Continuous+Integration[title=Continuous Integration]</emphasis>&#8230;&#8203;</simpara>
</informalexample>
<simpara>Documented at <inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/jira.png"/>
</imageobject>
<textobject><phrase>Continuous Integration</phrase></textobject>
</inlinemediaobject><link xl:href="https://confluence.(myorg).com/display/BR/Continuous+Integration">Confluence entry:Continuous Integration</link>&#8230;&#8203;</simpara>
<informalexample>
<simpara>See the <emphasis role="strong">cwiki:56885484["MacOS Devices wiki entry"]</emphasis> to connect to&#8230;&#8203;</simpara>
</informalexample>
<simpara>See the <inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/jira.png"/>
</imageobject>
<textobject><phrase>MacOS Devices wiki entry</phrase></textobject>
</inlinemediaobject><link xl:href="https://confluence.(myorg).com/pages/viewpage.action?pageId=56885484">Confluence entry:MacOS Devices wiki entry</link> to connect to&#8230;&#8203;</simpara>
</section>
</chapter>
<chapter xml:id="_inline_math_literal_math_literal_macro">
<title>Inline Math (<literal>math</literal>) Macro</title>
<simpara>An inline macro for rendering LaTeX math expressions using MathML. The macro supports two syntaxes: The asciidoctor syntax and the LaTeX shorthand syntax.</simpara>
<variablelist>
<varlistentry>
<term>Usage: </term>
<listitem>
<simpara><literal>math:EXPRESSION[]</literal></simpara>
<simpara><literal>$EXPRESSION$</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist>
<varlistentry>
<term>Attributes: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">EXPRESSION</emphasis> (required):
A LaTeX math expression that does not contain <literal>$</literal> characters. To use a <literal>$</literal> character within a math expression, it must be escaped using a backslash.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term><emphasis role="marked">Attention:</emphasis> </term>
<listitem>
<simpara>The math macro must be specified in a single line.
Line breaks within this macro are not supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Examples</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Source</entry>
<entry align="left" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">Here is some text with famous inline
math formulae such as math:E=mc^2[]
and $C=2 \Pi r$.</programlisting></entry>
<entry align="left" valign="top"><simpara>Here is some text with famous inline math formulae
such as <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></math>
and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>=</mo><mn>2</mn><mi>Π</mi><mi>r</mi></math>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_configuration_2">
<title>Configuration</title>
<simpara>No configuration required.</simpara>
<simpara>It is possible to use the <link linkend="math-include">mathinclude::[]</link> macro to include custom LaTeX commands.</simpara>
</section>
</chapter>
<chapter xml:id="_math_block_documentation">
<title>Math Block Documentation</title>
<variablelist>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>The math block is used to write blocks of mathematical formulae.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">delimiter</emphasis>: Lines containing four plus symbols <literal>++++</literal> delimit the block. This is required if the block contains empty lines or nested formatting.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">[math]
++++
Some formulae.
++++</programlisting>
<variablelist>
<varlistentry>
<term>Example</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">[math]
++++
\sum_{i=1}^n i = {n(n+1)\over{2}}
++++</programlisting>
<section xml:id="_example">
<title>Example</title>
<simpara>The above source will create the following output:</simpara>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mfenced close=")" open="("><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfenced></mrow><mn>2</mn></mfrac></math>
<simpara>It is possible to use the <link linkend="_math_include_documentation">mathinclude::[]</link> macro to include custom LaTeX commands.</simpara>
</section>
</chapter>
<chapter xml:id="_math_include_documentation">
<title>Math Include Documentation</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
<simpara><literal role="language-asciidoc">mathinclude::some/file/path.tex[]</literal></simpara>
<simpara><literal role="language-asciidoc">mathinclude::{find}some_other_file.tex[]</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Description</term>
<listitem>
<simpara>The <literal>math include</literal> can include <literal>.tex</literal> files containing custom LaTeX commands to be used in mathematical expressions. It is used in conjunction with <link linkend="inline-math-macro.adoc">inline math</link> and <link linkend="math-block.adoc">math block</link>. Multiple math include directives are appended, so it is possible to include several files. All math include directives are processed before the inline math expressions and the math blocks are processed.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The include path may contain the <link linkend="special-variables"><literal>{find}</literal></link> variable. In either case, the processor will search the included file by looking at each parent folder of the indicated path.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[math]
++++
Some maths that can use the LaTeX commands from the included file.
++++</programlisting>
</chapter>
<chapter xml:id="_inline_source_link_literal_srclnk_literal_macro">
<title>Inline Source Link (<literal>srclnk</literal>) Macro</title>
<simpara>An inline macro for generating hyperlinks from program elements such as types or methods to their source code in the code management system (i.e. GitHub).
This macro is used extensively by the Eclipse export wizard.</simpara>
<variablelist>
<varlistentry>
<term>Usage: </term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<screen>srclnk:PQN[label]</screen>
<variablelist>
<varlistentry>
<term>Attributes: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">PQN</emphasis> (required):
The <emphasis role="strong">p</emphasis>artially <emphasis role="strong">q</emphasis>ualified <emphasis role="strong">n</emphasis>ame.
Specifies the code element that is linked.
See <link xl:href="pqn.xml#PQN-def">PQN Definition</link> for the PQN&#8217;s syntax.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">label</emphasis> (optional):
The label of the link.
The label can start/end with markups e.g. for monospace.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>In case the PQN or the label contain special characters, the AsciiDoc pass macro (<literal>++</literal>) can be used to escape PQN and/or label.</simpara>
<variablelist>
<varlistentry>
<term><emphasis role="marked">Attention:</emphasis> </term>
<listitem>
<simpara>The srclnk macro must be specified in a single line.
Line breaks within this macro are not supported.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Examples</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Source</entry>
<entry align="left" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>The following source link of the field accessor <literal>size()</literal> contains a complete PQN.
The link&#8217;s label is the methods signature.</simpara>
<programlisting language="adoc" linenumbering="unnumbered">srclnk:++stdlib_api:packages:
eu.myorg.stdlib.model.base.api:
src/project/model/collections/DataList:
DataList#&lt;sizes++[``++public get size(): int[]++``].</programlisting></entry>
<entry align="left" valign="top"><simpara>The following source link of the field accessor <literal>size()</literal> contains a complete PQN.
The link&#8217;s label is the methods signature.</simpara>
<simpara><link xl:href="https://github.myorg.com/api/blob/master/packages/eu.myorg.stdlib.model.base.api/src/project/model/collections/DataList.n4jsd#L250">public get sizes(): int[]</link>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_configuration_3" role="language-asciidoc">
<title>Configuration</title>
<simpara>The following commands should be added to the <emphasis role="strong"><link xl:href="https://github.com/NumberFour/asciispec/blob/master/docs/examples/config.adoc">Configuration File</link></emphasis>:</simpara>
<section xml:id="_generated_documentation_directory">
<title>Generated Documentation Directory</title>
<simpara>The <literal>gen_adoc</literal> variable specifies the directory which contains all generated documentation.
It has to be set to parse the <literal>index.idx</literal> file and the generated adoc files, as well.</simpara>
<variablelist>
<varlistentry>
<term>Variable: </term>
<listitem>
<simpara><literal>:gen_adoc: &lt;path&gt;</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Attributes: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><literal>&lt;path&gt;</literal> can be an absolute or relative path to the location of the generated adoc documentation directory.
Usually, its name is <literal>gen_adoc</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Example: </term>
<listitem>
<simpara><literal>:gen_adoc: data/doc/gen_adoc</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_repository_location">
<title>Repository Location</title>
<simpara>The repository location command specifies one repository, that is, its name, description and url.
The url is later used to generate complete urls which point to specific source code files of the repository.
The repository location command can be used multiple times to add multiple repository locations.
It must be used at least once.</simpara>
<variablelist>
<varlistentry>
<term>Variable: </term>
<listitem>
<simpara><literal>:srclnk_repo_def: &lt;repoName&gt;; &lt;description&gt;; &lt;urlPrefix&gt;</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Attributes: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><literal>&lt;ID&gt;</literal> is the unique identifier of the variable. It has no further semantics.</simpara>
</listitem>
<listitem>
<simpara><literal>&lt;urlName&gt;</literal> is the name of the repository. It can be referred from the PQN.</simpara>
</listitem>
<listitem>
<simpara><literal>&lt;description&gt;</literal> is a short description of the repository.</simpara>
</listitem>
<listitem>
<simpara><literal>&lt;urlPrefix&gt;</literal>
is a prefix of every url that navigates to a source code file within the repository.
It contains the placeholders <literal>CMS_PATH</literal> and <literal>LINE_NO</literal> which later will be replaced by a specific file and line number, respectively.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Example: </term>
<listitem>
<simpara><literal>:srclnk_repo_def: stdlib_api; Standard lib API; https://github.com/NumberFour/asciispec/api/blob/master/{CMS_PATH}#L{LINE_NO}</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
</chapter>
<chapter xml:id="_extended_include_macro">
<title>Extended Include Macro</title>
<simpara>Asciidoctor already provides an include macro which can still be used as usual.
However, if the include macro starts with specific variables after the double colon, a special handling of the include macro is activated.
As of now, only one specific variable exists, which is <literal>{find}</literal> as in <literal>include::{find}myFile[]</literal>.
Despite having some special handling when using specific variables, the usual behaviour of the built-in include is still preserved and all its attributes can still be used.
The following documentation focuses on the include macro with activated special handling.</simpara>
<section xml:id="__literal_find_literal_include_macro" role="language-asciidoc">
<title><literal>{find}</literal> Include Macro</title>
<simpara>The general idea of the <literal>{find}</literal> variable in an include macro is to search the given file and replace the variable with the path to the matched file.
In short, it behaves the same like the <literal>{find}</literal> variable (see: <link linkend="_special_variables_in_asciispec">Special Variables - Find</link>), but enables two additional attributes which can be given in the squared brackets of the include macro.</simpara>
<variablelist>
<varlistentry>
<term>Usage: </term>
<listitem>
<simpara><literal role="language-asciidoc">include::{find}Target[Attributes]</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>With: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Target</emphasis> (required):
The name of the file whose contents shall be included.
The file name can contain directories.
The extension <literal>.adoc</literal> can be omitted.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Attributes</emphasis> (optional):</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">FILE_ONCE</emphasis>: Includes the same file only once.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">TARGET_ONCE</emphasis> (alias <emphasis role="strong">ONCE</emphasis>): Includes the same target only once.</simpara>
</listitem>
<listitem>
<simpara>(all other include attributes such as 'lines')</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Warnings and Errors: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Error: File Not Found</emphasis>
Is issued in case the given target could not be found.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Error: Circular Dependency</emphasis>
Is issued in case the included files depend on each other.
The last file which would create a circular dependency cycle is omitted.
This error is only issued if all include macros of the cycle use the <literal>{find}</literal> macro.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Warning: Cant Find Circular Dependencies</emphasis>
Is issued in case one or more includes do not use the <literal>{find}</literal> macro.
Despite this issue, circular dependencies can still be found if all of the causing files are included using the <literal>{find}</literal> macro.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Warning: Multiple File Matches</emphasis>
Is issued in case the given target is found at multiple locations.
The first match is chosen to be included.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Warning: Inconsistent Use of Attributes</emphasis>
Is issued in case one of the attributes is used inconsistently.
The TARGET_ONCE attribute is supposed to be used at none or at all includes with the same target.
The FILE_ONCE attribute is supposed to be used at none or at all includes matching the same file.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Example: </term>
<listitem>
<simpara>The following line includes the file <literal>file.adoc</literal> in the subdir <literal>dir</literal>.
The location of that file is found by the <literal>{find}</literal> directive (see: <xref linkend="special-variables"/>).
The attribute <literal>ONCE</literal> is the shorthand form for <literal>TARGET_ONCE</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal role="language-asciidoc">include::{find}dir/file.adoc[ONCE]</literal></simpara>
</section>
<section xml:id="__literal_api_literal_include_macro">
<title><literal>{api}</literal> Include Macro</title>
<simpara>Includes generated adoc (of StdLib API) text which previously was generated by the exporter wizard.
Uses a PQN to reference the section which is to be included.
(tbd)</simpara>
</section>
<section xml:id="__literal_src_literal_include_macro">
<title><literal>{src}</literal> Include Macro</title>
<simpara>Includes source code (of StdLib API) from GitHub.
Uses a PQN to reference the source element (e.g. a method) which is to be included.
(tbd)</simpara>
</section>
</chapter>
<chapter xml:id="_generated_anchors">
<title>Generated Anchors</title>
<simpara>The N4JS-N4 project <emphasis role="strong">eu.numberfour.n4js.jsdoc2spec</emphasis> generates adoc files for the documentation.
These adoc files are used to create an online reference and a standalone PDF file.
Moreover, the generated documentation is included into the stdlib API documentation.
This stdlib API document merges both generated and manual written documentation.</simpara>
<simpara>When including generated adoc content into manual written documents, we might want to reference sections that are located within the included contents.
Since these references rely on generated anchors used in the generated contents, an understanding of the structure of these anchors would be helpful.</simpara>
<section xml:id="_scope" role="language-n4js">
<title>Scope</title>
<simpara>Anchors in the generated documentation are created for every property of a Class or Interface.
For example, for every property such as datafields or methods, a section is generated that can be referenced using a generated anchor.
The following excerpt shows the beginning of the generated contents of the module n4.lang.Comparable.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Module n4.lang.Comparable

== Interface Comparable

Any class that supports equality checks should implement this interface.
Comparable is not similar to Java's comparable. In N4JS, it only provides the equals method.



[[sec:spec_n4.lang.Comparable.Comparable.equals]]
[role=memberdoc]
=== ++Method equals++

[.language-n4js]
==== Signature
srclnk:++stdlib_api:packages:eu.numberfour.n4js.base.api:src/n4js/n4/lang/Comparable:Comparable#equals++[``++public abstract equals(other: any): boolean++``]

==== Description

returns true if the provided entity is equal to the current object by loose equality rules.
Other may be null, in that case, false is to be returned.</programlisting>
<simpara>The example above contains one generated anchor: <literal>sec:spec_n4.lang.Comparable.Comparable.equals</literal> which references the <literal>equals</literal> method in the interface <literal>Comparable</literal> in the module <literal>n4.lang.Comparable</literal>.</simpara>
</section>
<section xml:id="_general_structure" role="language-n4js">
<title>General Structure</title>
<simpara>Generally, the structure of anchors is similar to the structure of PQNs.
However, the anchor structure is shorter and of defined length:</simpara>
<programlisting language="plain" linenumbering="unnumbered">sec:spec_&lt;module&gt;&lt;type&gt;&lt;delimiter&gt;&lt;property&gt;</programlisting>
<variablelist>
<varlistentry>
<term>module</term>
<listitem>
<simpara>specifies the name of a module</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>type</term>
<listitem>
<simpara>specifies the name of a type, e.g. a class in the module</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>delimiter</term>
<listitem>
<simpara>specifies the delimiter between type and property</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>property</term>
<listitem>
<simpara>specifies the name of one property in the type</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The delimiters in anchors differ from the PQN definition.
PQNs use strings for example like <literal>#</literal> or <literal>@&gt;</literal> to access non static properties or static setters.
Since these strings contains characters which are permitted in adoc anchors, they are replaced as follows:</simpara>
<variablelist>
<varlistentry>
<term>Delimiters</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">PQN</entry>
<entry align="left" valign="top">Anchor</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>non-static property</simpara>
<simpara>non-static getter</simpara>
<simpara>non-static setter</simpara>
<simpara>static property</simpara>
<simpara>static getter</simpara>
<simpara>static setter</simpara></entry>
<entry align="left" valign="top"><simpara>#</simpara>
<simpara>#&lt;</simpara>
<simpara>#&gt;</simpara>
<simpara>@</simpara>
<simpara>@&lt;</simpara>
<simpara>@&gt;</simpara></entry>
<entry align="left" valign="top"><simpara>.</simpara>
<simpara>.getter.</simpara>
<simpara>.setter.</simpara>
<simpara>.static.</simpara>
<simpara>.static.getter.</simpara>
<simpara>.static.setter.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<variablelist>
<varlistentry>
<term>Example: </term>
<listitem>
<simpara><literal>sec:spec_n4.lang.Identifiable.Identifiable.getter.id</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_special_characters" role="language-n4js">
<title>Special Characters</title>
<simpara>Special characters occur in anchors since property names can contain any characters.
In addition, the iterator symbol, which is used for iterators, often contains the <literal>#</literal> symbol.
Consequently, anchors have to escape these characters.
This is done by replacing the special character with a colon and its corresponding unicode number.
For example, the property name <literal>#iterator</literal> is transformed to <literal>:23iterator</literal>.
The resulting complete anchor is: <literal>sec:spec_n4.lang.Delegate.Delegate.:23iterator</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="PQN-def">
<title>Partially Qualified Names (PQNs)</title>
<simpara>A partially qualified name is a string that uniquely identifies a source element.
The following types of source elements can be specified with a PQN:</simpara>
<itemizedlist>
<listitem>
<simpara>properties of types like classes or interfaces,</simpara>
</listitem>
<listitem>
<simpara>top level elements such as functions and variables.</simpara>
</listitem>
</itemizedlist>
<simpara>In its longest form, a PQN structure can look like this:</simpara>
<screen>&lt;repository&gt;:&lt;repository-path&gt;:&lt;project&gt;:&lt;src-folder&gt;/&lt;module&gt;:&lt;classifier&gt;#&lt;member&gt;</screen>
<simpara>However, the goal of PQNs is to be able to identify source elements with very short names as long as they are still unique.
Therefore, if a source repository contains only one class with the name "PathSelector", then the string "PathSelector" should also be a PQN of that class.
If, however, a repository contains another class of the same name at another location, then it is necessary to add further information to the name, beginning at its end.
Let&#8217;s assume that two different modules contain a class with the name <literal>PathSelector</literal>.
In that case, it is necessary to include the module in the PQNs of the classes, e.g. <literal>a/b/module1:PathSelector</literal> and <literal>a/c/module2:PathSelector</literal>.</simpara>
<simpara>The syntax of a PQN is defined by the following BNF specifications:</simpara>
<programlisting language="ebnf" linenumbering="unnumbered">PQN                   ::= (((((
						  REPOSITORY_NAME ":")?
						  REPOSITORY_PATH ":")?
						  PROJECT_NAME ":")?
						  SRC_FOLDER_SPEC "/")?
						  MODULE_SPEC ":")?
						  LINKABLE_ELEMENT_SPEC

LINKABLE_ELEMENT_SPEC ::= TOPLEVEL_ELEMENT_SPEC | LINKABLE_MEMBER_SPEC
TOPLEVEL_ELEMENT_SPEC ::= CLASSIFIER_NAME | FUNCTION_NAME
LINKABLE_MEMBER_SPEC  ::= ((CLASSIFIER_NAME)? DELIMITER)? MEMBER_NAME
DELIMITER             ::= "#" | "#&lt;" | "#&gt;" | "@" | "@&lt;" | "@&gt;"

REPOSITORY_PATH       ::= PATH
SRC_FOLDER_SPEC       ::= PATH
MODULE_SPEC           ::= PATH

PATH                  ::= PATH_ELEMENT ( "/" PATH_ELEMENT )*
PATH_ELEMENT          ::= CHAR*

REPOSITORY_NAME       ::= CHAR*
PROJECT_NAME          ::= CHAR*
CLASSIFIER_NAME       ::= CHAR*
MEMBER_NAME           ::= CHAR*</programlisting>
<simpara>Note the different versions of the DELIMITER to differentiate between static and non-static members, and also to indicate getters and setters.
To identify non-static data fields or methods of a class (or interface), a <literal>#</literal> is used.
However, N4JS allows for multiple members to have the same name, e.g. there can be a static member with the same name as an instance member, or a getter/setter pair sharing the same name.
In such cases, the member is differentiated using the following DELIMITERs: <literal>pass:[#&lt;+</literal> indicates a getter, <literal>#&gt;</literal> indicates a setter, <literal>@</literal> indicates a static member, <literal>@&lt;</literal> indicates a static getter, and <literal>@&gt;</literal> indicates a static setter.</simpara>
<simpara>Note that the PQN is strictly structured from right to left.
This means that both, DELIMITER and CLASSIFIER_NAME, must be specified when the MODULE_SPEC is specified, although the BNF indicates otherwise.</simpara>
</chapter>
<chapter xml:id="_special_variables_in_asciispec">
<title>Special Variables in Asciispec</title>
<simpara>Some macros of Asciispec implement special variables which can be used by AsciiDoc authors.
These special variables are readonly.</simpara>
<section xml:id="_the_literal_find_literal_variable" role="language-asciidoc">
<title>The <literal>{find}</literal> Variable</title>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>There exist several use cases for adoc documents.
They are used to generate html pdf files, or they are written manually.
Moreover, some documents consist of more than one adoc file and thus rely on including other adoc documents.
In the latter case, also the included documents can be translated separately to generate a PDF for a single chapter only for example.</simpara>
<simpara>Several macros such as include, image, cross reference, or other custom macros rely on paths to work appropriately.
Since we have different use cases mentioned above, we need to specify paths relative to the including document.
As an example, the adoc file <literal>doc.adoc</literal> specifies the location of the bibliography using the directive <literal role="language-asciidoc">:bib-file: ../biblio.bib</literal>.
This path can not always be found when the doc.adoc file is translated both on its own and included from onother files.</simpara>
<simpara>The <literal>{find}</literal> variable provides the means to specify files relative to the adoc file no matter from where this adoc file was included.</simpara>
</section>
<section xml:id="_usage">
<title>Usage</title>
<variablelist>
<varlistentry>
<term>Syntax: </term>
<listitem>
<simpara><literal role="language-asciidoc">{find}Target</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Target: </term>
<listitem>
<simpara>an arbitrary file which can include a path</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Example 1: </term>
<listitem>
<simpara><literal role="language-asciidoc">:myImageVar: {find}path/to/picture.png</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Example 2: </term>
<listitem>
<simpara><literal role="language-asciidoc">image::{find}path/to/picture.png[]</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_semantics">
<title>Semantics</title>
<simpara>During the preprocessing of the document, all find variables are replaced by a concrete path to the targeted file.
This path is relative to the directory of the base/master file.
In order to replace the target, a search is performed which can have three outcomes:</simpara>
<itemizedlist>
<listitem>
<simpara>No file was found, which results in an error.</simpara>
</listitem>
<listitem>
<simpara>One file was found.</simpara>
</listitem>
<listitem>
<simpara>Multiple files were found, which results in a warning.</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/logo.png"/>
</imageobject>
<textobject><phrase>logo</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The search is performed in several directories.
It starts in the directory of the including file and walks up the folder structure.
In each of these directories, the target file is searched.
All matches are collected and the first is returned.
The search algorithm never descends into a subfolder (except if the target file specifies subfolders).</simpara>
</section>
<section xml:id="_warnings_and_errors">
<title>Warnings and Errors</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Error: File Not Found</emphasis>
Is issued in case the given target could not be found.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Warning: Multiple File Matches</emphasis>
Is issued in case the given target is found at multiple locations.
The first match is chosen to be included.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_using_literal_find_literal_on_github">
<title>Using <literal>{find}</literal> on GitHub</title>
<simpara>In case the an adoc file should also be able to be viewed on GitHub directly, the <literal>{find}</literal> variables can not be resolved by GitHub.
Consequently, the adoc file might not be displayed correctly, especially with respect to images included via <literal>image::</literal>{find}<literal>picture.png[]</literal>.</simpara>
<simpara>As a solution, the adoc file should define the find variable to an empty string using the following line:</simpara>
<simpara><literal role="language-asciidoc">:find:</literal></simpara>
<simpara>Using the line above, the image include resolves to <literal>image::picture.png[]</literal>.</simpara>
</section>
</section>
</chapter>
<appendix xml:id="_bibliography_2">
<title>Bibliography</title>

</appendix>
</book>
