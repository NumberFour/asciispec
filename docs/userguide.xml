<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>AsciiSpec Userguide</title>
<date>2017-01-30</date>
</info>
<preface>
<title></title>
<simpara>This userguide covers the basics of common and practical AsciiDoc syntax along with tips for using AsciiSpec.</simpara>
</preface>
<chapter xml:id="_document_structure">
<title>Document Structure</title>
<simpara>In order that we understand the use of AsciiSpec processors, it&#8217;s important to know the context in which they function.
This section provides a brief overview of how an AsciiDoc document is structured.
The following list is a simplified overview of the AsciiDoctor AST:</simpara>
<informaltable tabstyle="horizontal" frame="none" colsep="0" rowsep="0">
<tgroup cols="2">
<colspec colwidth="15*"/>
<colspec colwidth="85*"/>
<tbody valign="top">
<row>
<entry>
<simpara><literal>Document</literal></simpara>
</entry>
<entry>
<simpara>The document contains <literal>Sections</literal> and <literal>Blocks</literal> that make up the document and holds the document attributes.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Section</literal></simpara>
</entry>
<entry>
<simpara>Models sections in the document and dictates the structure of the <literal>Document</literal> tree.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Blocks</literal></simpara>
</entry>
<entry>
<simpara>Content within a <literal>Section</literal>, differentiated by <emphasis role="strong">context</emphasis> such as 'paragraph' or 'image'.</simpara>
</entry>
</row>
<row>
<entry>
<simpara><literal>Lists</literal>, <literal>Tables</literal>, <literal>ListItems</literal>&#8230;&#8203;</simpara>
</entry>
<entry>
<simpara>Nested content within a <literal>Block</literal>. Can also themselves be <literal>Blocks</literal>.</simpara>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_sections" role="language-adoc">
<title>Sections</title>
<simpara>Section levels are set using equals symbols (<literal>= title</literal>) followed by a space and the title. They must be preceded by an empty line:</simpara>
<formalpara>
<title>Section Levels</title>
<para>
<programlisting language="adoc" linenumbering="unnumbered">= Document Title (Level 0)

== Level 1 Section Title

=== Level 2 Section Title

==== Level 3 Section Title

===== Level 4 Section Title

== Another Level 1 Section Title</programlisting>
</para>
</formalpara>
<simpara>Documents with two Level 0 (<literal>=</literal>) Sections need the <literal>:doctype: book</literal> attribute set.</simpara>
<simpara>It&#8217;s illegal to skip section:</simpara>
<programlisting language="adoc" linenumbering="unnumbered">== Level 1 Section

==== Level 3 Section - Error!</programlisting>
<section xml:id="_styling_sections">
<title>Styling Sections</title>
<simpara>The most useful styles that can be added to a section are <literal>[bibliography]</literal> and <literal>[appendix]</literal>.
The next example demonstrates how to style a section as an Appendix:</simpara>
<example>
<title>Styling Sections</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">[appendix]
== Common Terms

The following is a list of common terms used...

[appendix]
== Comparison of Frameworks

Let's examine the effectiveness of each...</programlisting></entry>
<entry align="left" valign="top"><bridgehead xml:id="_appendix_a_common_terms" renderas="sect2">Appendix A: Common Terms</bridgehead>
<simpara>The following is a list of common terms used&#8230;&#8203;</simpara>
<bridgehead xml:id="_appendix_b_comparison_of_frameworks" renderas="sect2">Appendix B: Comparison of Frameworks</bridgehead>
<simpara>Let&#8217;s examine the effectiveness of each&#8230;&#8203;</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
</section>
</chapter>
<chapter xml:id="_blocks">
<title>Blocks</title>
<variablelist>
<varlistentry>
<term>Usage</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">[quote]
Before I came here I was confused about this subject.
Having listened to your lecture I am still confused.
But on a higher level.</programlisting>
<simpara>The above content will be rendered as follows:</simpara>
<blockquote>
<attribution>
Enrico Fermi
<citetitle>Notes on Quantum Mechanics (1954)</citetitle>
</attribution>
<simpara>Before I came here I was confused about this subject. Having listened to your lecture I am still confused. But on a higher level.</simpara>
</blockquote>
<simpara>Blocks are content in a section with styles or <literal>contexts</literal> such as paragraphs, source listings, images, etc.
Square brackets <literal>[]</literal> are used to indicate the style of the block and an empty line indicates that the block has finished.
All plain text of one or more lines will be parsed as a <literal>block</literal> with the 'paragraph' style by default, therefore:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">It was the best of times..

// Is the same as writing the following:

[paragraph]
It was the best of times..</programlisting>
<simpara>A list of built-in block types can be found in the <link xl:href="http://asciidoctor.org/docs/user-manual/#built-in-blocks-summary">AsciiDoctor User Manual: built-in blocks summary</link>.</simpara>
<section xml:id="_titles_attributes">
<title>Titles &amp; attributes</title>
<simpara>Adding a title to a block of content is done by adding a fullstop followed by the title text in the line previous to the block.</simpara>
<simpara>To style a block with a source <literal>listing</literal> context, we use <literal>[source]</literal> as with this example:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">.Fibonacci.n4js <co xml:id="CO1-1"/>
[source,n4js]   <co xml:id="CO1-2"/>
----  			<co xml:id="CO1-3"/>
export public class Fibonacci {
 public seq()  {

      var arr = [];
// etc...
----</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>In the first line we add a <emphasis>title</emphasis> to a block. This is done using a full stop followed by the title <literal>Fibonacci.n4js</literal> (note there is no space). A title can be added in this way to many different block types by default.</para>
</callout>
<callout arearefs="CO1-2">
<para>Setting a <literal>source</literal> context and the language is <literal>N4JS</literal>.</para>
</callout>
<callout arearefs="CO1-3">
<para>Notice the use of four hyphens to delimit the block: <literal>----</literal> (see <xref linkend="_delimiters"/>) this indicates to the parser where the block begins and ends. The listing block can then also include the empty line:</para>
</callout>
</calloutlist>
<simpara><emphasis role="strong"><emphasis>Output:</emphasis></emphasis></simpara>
<formalpara>
<title>Fibonacci.n4js</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">export public class Fibonacci {
 public seq()  {

      var arr = [];
// etc...</programlisting>
</para>
</formalpara>
<simpara>We can add more attributes relevant to the type of block.
In the case of a <literal>[verse]</literal> block, we can set the author and the source separated with commas like so: <literal>[verse, Carl Sagan, Cosmos]</literal>.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">.Deep Thought of the Day
[verse, Carl Sagan, Cosmos: A Personal Voyage]
If you want to make an apple pie from scratch, you must first create the universe.</programlisting>
<simpara>The above is rendered as follows:</simpara>
<blockquote>
<attribution>
Carl Sagan
<citetitle>Cosmos: A Personal Voyage</citetitle>
</attribution>
<literallayout>If you want to make an apple pie from scratch, you must first create the universe.</literallayout>
</blockquote>
</section>
<section xml:id="_delimiters">
<title>Delimiters</title>
<simpara>For all built-in blocks, the square brackets containing the block type (e.g. <literal>[source]</literal>) can be omitted and their delimiters will be used to determine the block type instead. For source blocks, this is four hyphens (<literal>----</literal>);</simpara>
<tip>
<simpara>This is convenient, but, of course, no positional attributes i.e. <literal>[blocktype,attr1,attr2]</literal> can be specified. In the case of listing blocks, this means no language can be specified for highlighting in the default manner e.g. <literal>[source,java]</literal>.</simpara>
</tip>
<example>
<title>Set Block Type by Delmiter</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">----
my code() {

string example...
----</programlisting></entry>
<entry align="left" valign="top"><screen>my code() {

string example...</screen></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<simpara>For a full list of delimiters, refer to the <link xl:href="http://asciidoctor.org/docs/user-manual/#built-in-blocks-summary">Asciidoctor User Manual: Built-in Block Summary</link>.</simpara>
</section>
<section xml:id="_admonition_blocks">
<title>Admonition Blocks</title>
<simpara><emphasis role="strong">Usage:</emphasis></simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">WARNING: Don't divide by zero...</programlisting>
<simpara>A useful feature built-in to AsciiDoctor is the inclusion of admonition blocks.
By default, the following admonition blocks are available;</simpara>
<itemizedlist>
<listitem>
<simpara><literal>TIP</literal></simpara>
</listitem>
<listitem>
<simpara><literal>NOTE</literal></simpara>
</listitem>
<listitem>
<simpara><literal>IMPORTANT</literal></simpara>
</listitem>
<listitem>
<simpara><literal>CAUTION</literal></simpara>
</listitem>
<listitem>
<simpara><literal>WARNING</literal></simpara>
</listitem>
</itemizedlist>
<simpara>They render as with the <literal>WARNING</literal> block below, except with different <xref linkend="_icons"/>.</simpara>
<warning>
<simpara>Don&#8217;t divide by zero. In ordinary arithmetic, the expression has no meaning, as there is no number which&#8230;&#8203;</simpara>
</warning>
<simpara>The standard block syntax can also be used if the admonition spans multiple paragraphs:</simpara>
<example>
<title>Delimited Admonition Block</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">[WARNING]
--
Don't divide by zero.

In ordinary arithmetic, the expression has no meaning,
as there is no number which, multiplied by 0..
--</programlisting></entry>
<entry align="left" valign="top"><warning>
<simpara>Don&#8217;t divide by zero.</simpara>
<simpara>In ordinary arithmetic, the expression has no meaning,
as there is no number which, multiplied by 0..</simpara>
</warning></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
<section xml:id="_nesting_blocks">
<title>Nesting Blocks</title>
<simpara>Blocks can contain other blocks:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">.Nested Listing
====
See the following code snippet:

----
my code() {

----

====</programlisting></entry>
<entry align="left" valign="top"><example>
<title>Nested Listing</title>
<simpara>See the following code snippet, for example:</simpara>
<screen>my code() {</screen>
</example></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Nesting blocks of the same type is done using a different number of delimiters:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">.Outer Example
===== <co xml:id="CO2-1"/>

.Inner Example
==== <co xml:id="CO2-2"/>

See the following code snippet:

[source,html]
----
&lt;div id="footnotes"&gt;
----

====

=====</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>Outer delimiter uses 5 characters</para>
</callout>
<callout arearefs="CO2-2">
<para>Inner delimiter uses 4 characters</para>
</callout>
</calloutlist></entry>
<entry align="left" valign="top"><example>
<title>Outer Example</title>
<example>
<title>Inner Example</title>
<simpara>See the following code snippet:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;div id="footnotes"&gt;</programlisting>
</example>
</example></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_block_macro" role="language-asciidoc">
<title>Block Macro</title>
<variablelist>
<varlistentry>
<term>Usage: </term>
<listitem>
<simpara><literal>macrotype::attributes[additional parameters]</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Block macros are used to create a block member in a document.<?asciidoc-br?>
A block macro must be on a single line by itself with an empty line before and after.</simpara>
<simpara>The <literal>toc::[]</literal> macro creates a table of contents block at that position in the document (to enable this feature, see <link linkend="Document Attributes">setting document attributes</link> below).</simpara>
<simpara>Another common block macro is the <literal>image::[]</literal> macro;</simpara>
<example>
<title>Block Macro</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><screen>The following image is considered
the last line of this pargraph.
image::{find}images/logo.png[]

Leaving an empty line before and after the
image block macro will create a block as expected:

image::{find}images/logo.png[]

beginning of next block...</screen></entry>
<entry align="left" valign="top"><simpara>The following image macro is considered
the last line of this pargraph.
image::images/logo.png[]</simpara>
<simpara>Leaving an empty line before and after
the image block macro will create a block as expected:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/logo.png"/>
</imageobject>
<textobject><phrase>logo</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>beginning of next block&#8230;&#8203;</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
<section xml:id="_tables" role="language-asciidoc">
<title>Tables</title>
<simpara>Table blocks are typically delimited by a character (usually a pipe <literal>|</literal>) and three equals symbols (<literal>|===</literal>);</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">|===
| Hello | world
|===</programlisting>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Hello</simpara></entry>
<entry align="left" valign="top"><simpara>world</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<example>
<title>Tables and CSV</title>
<simpara>A comma can be used exactly as above to separate cells in the following way:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">,===
, Hello , World
,===</programlisting>
<simpara>A different character can be used to delimit cells by substituting the pipe with the separator you wish to use.</simpara></entry>
<entry align="left" valign="top"><screen>[cols=6]
,===
include::music-collection.csv[]
,===</screen>
<simpara>Using commas in this way can provide an easy solution to including CSV values (<literal>include::mydata.csv[]</literal>) into a table without having to reformat the data:</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<simpara>Formatting tables:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">|===
| Backend 3+^| Description

| html (or html5) 3+| HTML5, styled with CSS3 (default).
| pdf 3+| PDF, a portable document format. Requires the asciidoctor-pdf gem.
|===</programlisting>
<simpara>In the above table, formatting attributes <emphasis role="strong">3+</emphasis> are used. The ^ caret symbol is used to centre-align the text and <emphasis role="strong">3+</emphasis> indicates that the cell spans three consecutive columns.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Backend</entry>
<entry align="center" valign="top" namest="col_2" nameend="col_4">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>html (or html5)</simpara></entry>
<entry align="left" valign="top" namest="col_2" nameend="col_4"><simpara>HTML5, styled with CSS3 (default).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>pdf</simpara></entry>
<entry align="left" valign="top" namest="col_2" nameend="col_4"><simpara>PDF, a portable document format. Requires the asciidoctor-pdf gem.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>A full overview of the possibilities to create complex tables can be found in the <link xl:href="http://www.asciidoctor.org/docs/user-manual/#tables">tables section</link> of the User Manual.</simpara>
</section>
<section xml:id="_custom_asciispec_blocks">
<title>Custom AsciiSpec Blocks</title>
<simpara>For examples of custom AsciiSpec blocks (definition and requirements), refer to the <xref linkend="_asciispec_cheat_sheet"/> and for comprehensive documentation, see the AsciiSpec processor <link xl:href="https://numberfour.github.io/asciispec/spec.html">Specification</link>.</simpara>
</section>
</chapter>
<chapter xml:id="_attributes_variables" role="language-asciidoc">
<title>Attributes &amp; Variables</title>
<variablelist>
<varlistentry>
<term>Usage: </term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="asciidoc" linenumbering="unnumbered">:attribute: value

{attribute}</programlisting>
<simpara role="language-adoc">Setting document attributes is done by adding an attribute entry line as <literal>:attribute: value</literal> above.
Variables are declared using <literal>{}</literal> curly brackets and can be used for substitutions.
Attributes can be inserted anywhere in a document unless they are specific <emphasis>header attributes</emphasis> as described in the next section.</simpara>
<example>
<title>Document Attributes</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">:revnumber: 2.0 <co xml:id="CO3-1"/>

Last modified:: {docdatetime}  <co xml:id="CO3-2"/>
Revision:: {revnumber}.</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>The revision number needs to be set, otherwise the attribute in the last line will be empty.</para>
</callout>
<callout arearefs="CO3-2">
<para><literal>{docdatetime}</literal> is automatically set to last time the source document is modified</para>
</callout>
</calloutlist></entry>
<entry align="left" valign="top"><variablelist>
<varlistentry>
<term>Last modified</term>
<listitem>
<simpara>2017-01-30 17:23:19 CET<?asciidoc-br?></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Revision</term>
<listitem>
<simpara>2.0.</simpara>
</listitem>
</varlistentry>
</variablelist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Document attributes can be evaluated using the <literal>ifdef::[]</literal> macro to create some interesting logic.
The line below checks if the backend is <literal>HTML5</literal> and if it is, the content in the square brackets will be included:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">ifdef::backend-html5[This content is included in HTML5 output.]</programlisting>
<simpara><emphasis role="strong">Output:</emphasis></simpara>
</example>
<example>
<title>Evaluating Statements</title>
<simpara>The previous example shows how to include a single line of content into a document using an inline ifdef.<?asciidoc-br?>
The same can also be done using blocks as follows:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara></simpara>
<screen>ifeval::[2 + 2 != 5]

- [x] Two plus two does not a five make.

- [x] Rules of mathematics still behave as expected.

endif::[]</screen></entry>
<entry align="left" valign="top"><itemizedlist mark="none">
<listitem>
<simpara>&#10003; Two plus two does not a five make.</simpara>
</listitem>
<listitem>
<simpara>&#10003; Rules of mathematics still behave as expected.</simpara>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/asciispec/issues/13"><inlinemediaobject>
<imageobject>
<imagedata fileref="images/icons/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>AS-13</link></simpara>
</sidebar>
</example>
<example>
<title>Setting Attributes Inline</title>
<simpara>The following two examples set an attribute using inline shorthand:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Source</entry>
<entry align="left" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">Attributes can be set inline too:
We should {set:country:France} travel to {country}!</programlisting></entry>
<entry align="left" valign="top"><simpara>Attributes can be set inline too:
We should  travel to France!</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<section xml:id="_header_attributes" role="language-asciidoc">
<title>Header Attributes</title>
<simpara>A header starts with a document title followed by two optional lines defining author and revision information.<?asciidoc-br?>
Finally, document-wide settings are defined by means of <emphasis>header attributes</emphasis> :</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= AsciiSpec Documentation
Brian Thomas Smith
First Draft
:toc: right</programlisting>
<simpara>An example header attribute is <literal>:toc:</literal> which sets the position of the Table of Contents in the destination document.
The above example right-aligns the Table of Contents.
Another option is to enable the use of the <literal>toc::[]</literal> block macro to insert a Table of Contents block in any section:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= AsciiSpec Documentation
Brian Thomas Smith
First Draft
:toc: macro

// A Table of Contents is rendered here by default

== Section two

toc::[] // But will be rendered here instead</programlisting>
<simpara>A full table of the available built-in document attributes, see the <link xl:href="http://asciidoctor.org/docs/user-manual/#builtin-attributes">Built-in Attributes</link> section in the AsciiDoctor User Manual.</simpara>
</section>
<section xml:id="_special_variables" role="language-asciidoc">
<title>Special Variables</title>
<simpara>AsciiSpec introduces the concept of a special <literal>{find}</literal> variable which is designed to resolve paths. The <literal>{find}</literal> variable provides the means to specify files relative to the <literal>.adoc</literal> file no matter from where this <literal>.adoc</literal> file was included.</simpara>
<simpara><emphasis role="strong">Usage:</emphasis></simpara>
<simpara><literal>:myImageVar: {find}path/to/picture.png</literal></simpara>
<simpara><literal>image::{find}path/to/picture.png[]</literal></simpara>
<simpara>For complete documentation on this variable, see <link xl:href="https://github.com/NumberFour/asciispec/blob/master/docs/custom-processors/special-variables.adoc">Special Variables</link>.</simpara>
<section xml:id="_using_literal_find_literal_on_github">
<title>Using <literal>{find}</literal> on GitHub</title>
<simpara>The <literal>{find}</literal> variables <emphasis>cannot be resolved by GitHub</emphasis> and consequently, the adoc file might not be displayed correctly, especially with respect to images.</simpara>
<simpara>As a solution, the adoc file should define the find variable to an empty string using the following line:</simpara>
<simpara><literal role="language-asciidoc">:find:</literal></simpara>
<simpara>Using the line above, the image include resolves to <literal>image::picture.png[]</literal>.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_includes">
<title>Includes</title>
<informaltable role="language-asciidoc" frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Type</entry>
<entry align="left" valign="top">Source</entry>
<entry align="left" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Include</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>include::filename.adoc[leveloffset=offset]
</literal></simpara><simpara><literal>include::file2.adoc[tags=tagname,tagname2]
</literal></simpara><simpara><literal>include::file3.adoc[lines=ranges,indent=depth]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Includes referenced file(s) dictated by the comma-separated attributes.<?asciidoc-br?>
The <literal>{find}</literal> variable may be used. See <link xl:href="https://github.com/NumberFour/asciispec/blob/master/docs/custom-processors/special-variables.adoc">Special Variables</link>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Include tags</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>tag::tagname[]<?asciidoc-br?>
</literal></simpara><simpara><literal>end::tagname[]</literal></simpara></entry>
<entry align="left" valign="top"><simpara>These tags should be added in commented lines in the <emphasis role="strong">included</emphasis> document.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>When including multiple documents that begin with <link linkend="_sections">Level 0 Sections</link> (<literal>= Section Title</literal>), the following method can be used to ensure the sections are offset correctly;</simpara>
<example>
<title>Level Offset for Multiple Includes</title>
<programlisting language="adoc" linenumbering="unnumbered">:leveloffset: +1

include::userguide-fragments/structure.adoc[]

include::userguide-fragments/blocks.adoc[]

// etc...

:leveloffset: -1</programlisting>
</example>
</chapter>
<chapter xml:id="_css_classes">
<title>CSS classes</title>
<simpara role="language-adoc">CSS classes can be added to blocks in Asciidoc by using the the 'dot-prefix' syntax <literal>[.css-class]</literal> on the preceding line or by using the <literal>role=</literal> attribute:</simpara>
<example role="language-adoc">
<title>Applying CSS Classes</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting xml:id="block-css-class" language="asciidoc" linenumbering="unnumbered">[.xx-large]
This paragraph is assigned the `xx-large` CSS class.

[role=blue]
Lovely Calming Blue Text on every character
of the brief, yet poignant sentence.</programlisting></entry>
<entry align="left" valign="top"><simpara role="xx-large">This paragraph is assigned the <literal>xx-large</literal> CSS class.</simpara>
<simpara role="blue">Lovely Calming Blue Text on every character
of the brief, yet poignant sentence.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Let&#8217;s set the CSS class <literal>xx-small</literal> on the source block below using the using the <literal>role=</literal> attribute to change the text size for this long console log:</simpara>
<simpara><literal>[source,bash,role=xx-small]</literal></simpara>
<simpara><emphasis role="strong">Output:</emphasis></simpara>
<programlisting role="xx-small" language="bash" linenumbering="unnumbered">Downloading: https://repo.maven.apache.org/maven2/com/google/guava/guava/13.0-rc2/guava-13.0-rc2.pom
Downloaded: https://repo.maven.apache.org/maven2/com/google/guava/guava/13.0-rc2/guava-13.0-rc2.pom (6 KB at 60.0 KB/sec)
Downloading: http://www2.ph.ed.ac.uk/maven2/com/google/guava/guava-parent/13.0-rc2/guava-parent-13.0-rc2.pom
...</programlisting>
<simpara>When using GFM <footnote><simpara><xref linkend="_github_flavored_markdown"/></simpara></footnote>, it&#8217;s possible with the following syntax:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">[.xx-small]
```bash
Downloaded: https://repo.maven.apache....
```</programlisting></entry>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">[.xx-small.language-bash] <co xml:id="CO4-1"/>
```
Downloaded: https://repo.maven.apache....
```</programlisting>
<calloutlist>
<callout arearefs="CO4-1">
<para>An example of setting multiple CSS classes on a block: <literal>xx-small</literal> and <literal>language-bash</literal> for Prism syntax highlighting.</para>
</callout>
</calloutlist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<section xml:id="_inline_syntax_highlighting_html" role="language-adoc">
<title>Inline Syntax Highlighting (HTML)</title>
<simpara>When using <link xl:href="http://prismjs.com/">Prism.js</link> (AsciiSpec default), CSS classes can be set inline using <literal>[language-name]</literal> before the code.<?asciidoc-br?>
Note that with blocks, a full stop before the CSS class is necessary, see <link linkend="block-css-class">the above example</link>.</simpara>
<simpara><emphasis role="strong">Usage:</emphasis> Make sure the charset <literal>[language-html]`&lt;meta charset="utf-8" /&gt;`</literal> is set correctly.</simpara>
<simpara><emphasis role="strong">Output:</emphasis> Make sure the charset <literal role="language-html">&lt;meta charset="utf-8" /&gt;</literal> is set correctly.</simpara>
<simpara>The following example demonstrates some common cases of switching the language of inline syntax highlighting;</simpara>
<example>
<title>Change Inline Syntax Highlighting Language</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">Check the [language-html]`&lt;a href="favicon.ico"/&gt;` favicon in the header. <co xml:id="CO5-1"/>
Set the following id: `&lt;div id="menubar"&gt;` on the menubar. + <co xml:id="CO5-2"/>
Inline AsciiDoc macros (`macro:[]`) are useful! <co xml:id="CO5-3"/></programlisting></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis role="strong">Output</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>The favicon is located <literal role="language-html">&lt;a href="favicon.ico"/&gt;</literal> in the header.<?asciidoc-br?>
The menu bar was given the following id: <literal>&lt;div id="menubar"&gt;</literal>.<?asciidoc-br?>
Inline AsciiDoc macros (<literal>macro:[]</literal>) are useful!</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<calloutlist>
<callout arearefs="CO5-1">
<para>Only the first inline HTML listing is highlighted.</para>
</callout>
<callout arearefs="CO5-2">
<para>The second piece of code is highlighted as AsciiDoc, hence the coloration (or lack thereof).</para>
</callout>
<callout arearefs="CO5-3">
<para>Asciidoc is highlighted correctly.</para>
</callout>
</calloutlist>
<note>
<simpara>The <literal>[language-html]</literal> CSS class is overriding one already set on this section, see <xref linkend="_applying_css_classes_to_sections"/>.<?asciidoc-br?>
There is a lot of AsciiDoc to highlight in this document and so the parent section <xref linkend="_css_classes"/> has been assigned the class <literal>[.language-adoc]</literal>.</simpara>
</note>
</example>
<example>
<title>Set Syntax Highlighter Language per Block</title>
<simpara>Instead of writing <literal role="language-adoc">[language-html]</literal> before every piece of inline code, a CSS class can be set to a paragraph or block.
All inline source code within that paragraph will then be highlighted with the language specified:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="1">
<colspec colname="col_1" colwidth="100*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">[.language-html]
The favicon was set at `&lt;a href="favicon.ico"/&gt;` in your header.
The next thing was the menubar: `&lt;div id="menubar"&gt;` which contained a list `&lt;ul class="fa-ul"&gt;`...</programlisting></entry>
</row>
<row>
<entry align="left" valign="top"><simpara role="language-html">The favicon was set at <literal>&lt;a href="favicon.ico"/&gt;</literal> in your header.<?asciidoc-br?>
The next thing was the menubar: <literal>&lt;div id="menubar"&gt;</literal> which contained a list <literal>&lt;ul class="fa-ul"&gt;</literal>&#8230;&#8203;</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
<section xml:id="_applying_css_classes_to_sections" role="language-adoc">
<title>Applying CSS Classes to Sections</title>
<simpara>It&#8217;s also possible to set a class on a section. The highest section level that a CSS class can be applied on is the Level 1 (<literal>==</literal>) and all contained sections will inherit this class.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">[.language-css]
== CSS
Everything enclosed in backticks in this
section gets styled with correct CSS `@media
print {code {text-shadow: none;}}`
syntax highlighting.

=== The `font-weight: bold;` attribute

Always use `font-weight: bold;` to get your point across...</programlisting></entry>
<entry align="left" valign="top"><section xml:id="_css" role="language-css">
<title>CSS</title>
<simpara>Everything enclosed in backticks in this
section gets styled with correct CSS <literal>@media
print {code {text-shadow: none;}}</literal>
syntax highlighting.</simpara>
<section xml:id="_the_literal_font_weight_bold_literal_attribute">
<title>The <literal>font-weight: bold;</literal> attribute</title>
<simpara>Always use <literal>font-weight: bold;</literal> to get your point across&#8230;&#8203;</simpara>
</section>
</section></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Some custom CSS has been added to the Foundation stylesheet specifically for styling large sections in this manner.<?asciidoc-br?>
One useful class is <literal>[.todo]</literal> which is demonstrated here;</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">[.todo]
== Summary

. First Item
.. Second Item

=== Feature A 	<co xml:id="CO6-1"/>

This feature needs documentation!

== Overview 	<co xml:id="CO6-2"/>

Fully Documented, see...</programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para><emphasis role="strong">Subsections</emphasis> will inherit the CSS class specified</para>
</callout>
<callout arearefs="CO6-2">
<para>The next section of the same level or higher will not inherit this class.<?asciidoc-br?>
In this example, the <literal>Overview</literal> section does not have the <literal>todo</literal> class.</para>
</callout>
</calloutlist></entry>
<entry align="left" valign="top"><section xml:id="_summary" role="todo">
<title>Summary</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>First Item</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Second Item</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<section xml:id="_feature_a">
<title>Feature A</title>
<simpara>This feature needs documentation!</simpara>
</section>
</section>
<section xml:id="_overview">
<title>Overview</title>
<simpara>Fully Documented, see&#8230;&#8203;</simpara>
</section></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_delimited_by_open_blocks">
<title>Delimited by Open Blocks</title>
<simpara>CSS classes can span multiple blocks or paragraphs when delimited by two hyphens <literal>--</literal>:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">[.red]
--
This paragraph is assigned the `red` CSS class.

- [x] All these list items will be red, too!
--

The next paragraph will be styled as usual</programlisting></entry>
<entry align="left" valign="top"><simpara>This paragraph is assigned the <literal>red</literal> CSS class.</simpara>
<itemizedlist mark="none">
<listitem>
<simpara>&#10003; All these list items will be red, too!</simpara>
</listitem>
</itemizedlist>
<simpara>The next paragraph will be styled as usual</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</chapter>
<chapter xml:id="_asciispec_cheat_sheet">
<title>AsciiSpec Cheat Sheet</title>
<informaltable role="language-adoc" frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<thead>
<row>
<entry align="center" valign="top">Name</entry>
<entry align="center" valign="top">Source</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Task Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>task:taskId[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline BibTeX Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cite:[ref,ref2(optionalPage)]</literal></simpara>
<simpara><literal>bibliography::[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Cwiki Macro</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>cwiki:path[title=Hyperlinked Text]</literal></simpara>
<simpara><literal>cwiki:pageID[title=Hyperlinked Text]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Definition Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>.title</literal><?asciidoc-br?>
<literal>[def]</literal><?asciidoc-br?>
<literal>--</literal><?asciidoc-br?>
My Definition<?asciidoc-br?>
<literal>--</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Requirements Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>.This is the title</literal><?asciidoc-br?>
<literal>[req,id=RSL-3,version=1]</literal><?asciidoc-br?>
<literal>--</literal><?asciidoc-br?>
My Super Requirement<?asciidoc-br?>
<literal>--</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Extended Include</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>include::{find}myfile.adoc[]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Source Link</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>srclnk:[DataList#&lt;sizes]</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline Math</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>math:E=mc^2[]</literal><?asciidoc-br?>
<literal>$C=2 \Pi r$</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Math Block</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>[math]</literal><?asciidoc-br?>
<literal>++++</literal><?asciidoc-br?>
<literal>\sum_{i=1}^n i = {n(n+1)\over{2}}</literal><?asciidoc-br?>
<literal>++++</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</chapter>
<chapter xml:id="_tips">
<title>Tips</title>
<section xml:id="_newlines_line_breaks" role="language-asciidoc">
<title>Newlines &amp; Line Breaks</title>
<simpara>New lines are consumed by AsciiDoctor, so in order to preserve line breaks, add a plus symbol at the end of a line or the <literal>[%hardbreaks]</literal> attribute;</simpara>
<example>
<title>Line Breaks</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">A short line. +
A slightly longer line. +
A conclusion.

[%hardbreaks]
I believe in the power
of the imagination
to remake the world</programlisting></entry>
<entry align="left" valign="top"><simpara>A short line.<?asciidoc-br?>
A slightly longer line.<?asciidoc-br?>
A conclusion.</simpara>
<simpara>I believe in the power<?asciidoc-br?>
of the imagination<?asciidoc-br?>
to remake the world</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<example>
<title>List Continuation</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">* First

Item

* Second
+ 	<co xml:id="CO7-1"/>
Item

** And a source block:
+
	<co xml:id="CO7-2"/>
[source,adoc]
task:ASC-123[]</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>Plus symbol continues the list indentation</para>
</callout>
<callout arearefs="CO7-2">
<para>Empty lines are allowed.</para>
</callout>
</calloutlist></entry>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara>First</simpara>
</listitem>
</itemizedlist>
<simpara>Item</simpara>
<itemizedlist>
<listitem>
<simpara>Second</simpara>
<simpara>Item</simpara>
<itemizedlist>
<listitem>
<simpara>And a source block:</simpara>
<programlisting language="adoc" linenumbering="unnumbered">task:ASC-123[]</programlisting>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
<section xml:id="_escaping_characters_macros" role="language-asciidoc">
<title>Escaping Characters / Macros</title>
<simpara>Escaping characters characters used for formatting can be done using plus symbols:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">A single asterisk: +*+ And a few literal characters ++* _ `++</programlisting></entry>
<entry align="left" valign="top"><simpara>A single asterisk: * And a few literal characters * _ `</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Backslashes can also be used to escape AsciiDoc formatting:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">Escape \*bold* formatting +
Escape dou\**ble aster**isks</programlisting></entry>
<entry align="left" valign="top"><simpara>Escape *bold* formatting<?asciidoc-br?>
Escape dou**ble aster**isks</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The pass macro is also a useful way of escaping long sequences of complicated formatting.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="60*"/>
<colspec colname="col_2" colwidth="40*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">pass:[*bold*, __unde**rsc__ores, double aster**isks] +
\pass:[*bold*, __unde**rsc__ores, double aster**isks] <co xml:id="CO8-1"/>

\{revnumber} 	<co xml:id="CO8-2"/>

+\+{revnumber}	<co xml:id="CO8-3"/></programlisting>
<calloutlist>
<callout arearefs="CO8-1">
<para>The pass macro and variables can be escaped using a backslash.</para>
</callout>
<callout arearefs="CO8-2">
<para>A backslash escapes variable substitution</para>
</callout>
<callout arearefs="CO8-3">
<para>Preventing the escaped variable</para>
</callout>
</calloutlist></entry>
<entry align="left" valign="top"><simpara>*bold*, __unde**rsc__ores, double aster**isks<?asciidoc-br?>
pass:[<emphasis role="strong">bold</emphasis>, <emphasis>unde<emphasis role="strong">rsc</emphasis>ores, double aster</emphasis>isks]</simpara>
<simpara>{revnumber}</simpara>
<simpara>\2.0</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_github_flavored_markdown">
<title>Github Flavored Markdown</title>
<simpara>Some common <link xl:href="https://guides.github.com/features/mastering-markdown/">Github Markdown</link> is also supported, such as backticks used for code listings:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">```n4js
export public class Fibonacci {
 public seq()  {

      var arr = [];
// etc...
```</programlisting>
<simpara>List items and checkboxes are also supported:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="adoc" linenumbering="unnumbered">- [x] Done!
- [ ] Not Done!

# This is an &lt;h1&gt; tag
## This is an &lt;h2&gt; tag

&gt; We're living the future so
&gt; the present is our past.</programlisting></entry>
<entry align="left" valign="top"><itemizedlist mark="none">
<listitem>
<simpara>&#10003; Done!</simpara>
</listitem>
<listitem>
<simpara>&#10063; Not Done!</simpara>
</listitem>
</itemizedlist>
<section xml:id="_this_is_an_h1_tag">
<title>This is an &lt;h1&gt; tag</title>
<section xml:id="_this_is_an_h2_tag">
<title>This is an &lt;h2&gt; tag</title>
<blockquote>
<simpara>We&#8217;re living the future so
the present is our past.</simpara>
</blockquote>
</section>
</section></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_literal_block_shorthand">
<title>Literal Block Shorthand</title>
<simpara>A shorthand method of creating a literal block is to add indentation to a block. Spaces or tabs on the first line will indent a block as a literal:</simpara>
<simpara><emphasis role="strong">Source:</emphasis></simpara>
<programlisting language="asciidoc" linenumbering="unnumbered"> A Single Space
	Or a Tab will Suffice!</programlisting>
</section>
<section xml:id="_icons">
<title>Icons</title>
<simpara>When the attribute <literal>:icons: font</literal> is set, <link xl:href="http://fontawesome.io/cheatsheet/">Font Awesome</link> icons can be used inline using the macro <literal>icon:name[]</literal>.</simpara>
<example>
<title>Inline Icons Example</title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="top">Output</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="asciidoc" linenumbering="unnumbered">Be Careful! icon:fire[]

The source is on icon:github[] GitHub!</programlisting></entry>
<entry align="left" valign="top"><simpara>Be Careful! <inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/fire.png"/>
</imageobject>
<textobject><phrase>fire</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>The source is on <inlinemediaobject>
<imageobject>
<imagedata fileref="./images/icons/github.png"/>
</imageobject>
<textobject><phrase>github</phrase></textobject>
</inlinemediaobject> GitHub!</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
</section>
<section xml:id="_colons" role="language-adoc">
<title>Colons</title>
<simpara>When learning AsciiDoc syntax, it can be confusing whether to use one or two colons for certain macros.
The rule is as follows:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Type</entry>
<entry align="center" valign="middle">Syntax</entry>
<entry align="left" valign="top">Example</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Inline</emphasis></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>:</literal></simpara></entry>
<entry align="left" valign="top"><simpara>We can include this <literal>image:test.png[]</literal> inline</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Block</emphasis></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>::</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The following Table of Contents<?asciidoc-br?></simpara>
<simpara><literal>toc::[]</literal><?asciidoc-br?></simpara>
<simpara>cannot be used inline.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_media" role="language-asciidoc">
<title>Media</title>
<simpara>Embed youtube content using the syntax <literal>video::3NjQ9b3pgIg[youtube,800,600]</literal>.</simpara>

<simpara>Vimeo can be embedded using a similar syntax: <literal>video::67480300[vimeo]</literal></simpara>
<section xml:id="_audio">
<title>Audio</title>
<simpara>Audio files can also be added to a HTML document using the <literal>audio</literal> macro:</simpara>
<simpara><literal>audio::soundfiles/Cherry-MX-Blue.mp3[options="autoplay,loop"]</literal></simpara>
</section>
</section>
</chapter>
<appendix xml:id="_resources">
<title>Resources</title>
<simpara><emphasis role="strong"><link xl:href="https://github.com/NumberFour/asciispec#documentation">AsciiSpec Docs</link></emphasis> - NumberFour AsciiSpec Documentation<?asciidoc-br?>
<emphasis role="strong"><link xl:href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">AsciiDoc Syntax Quick Reference</link></emphasis> - Covers most standard formatting needs.<?asciidoc-br?>
<emphasis role="strong"><link xl:href="http://asciidoctor.org/docs/user-manual/">AsciiDoctor User Manual</link></emphasis> - Reference Manual detailing document attributes, conversion settings, extended features etc.<?asciidoc-br?></simpara>
<section xml:id="_sublime_text_packages">
<title>Sublime Text packages</title>
<simpara><emphasis role="strong"><link xl:href="https://packagecontrol.io/packages/OmniMarkupPreviewer">OmniMarkup Preview</link></emphasis> - Serves a live preview to a browser for realtime editing.<?asciidoc-br?>
<emphasis role="strong"><link xl:href="https://github.com/bsmith-n4/N4-MarkupPreview">OmniMarkup Custom Fork</link></emphasis> - A custom fork that provides styles and syntax highlighting aligned with AsciiSpec.<?asciidoc-br?>
<emphasis role="strong"><link xl:href="https://github.com/asciidoctor/sublimetext-asciidoc">Sublime Text AsciiDoc Package</link></emphasis> - Syntax highlighting, snippets, keymaps and more.<?asciidoc-br?></simpara>
</section>
<section xml:id="_document_converters">
<title>Document Converters</title>
<simpara><emphasis role="strong"><link xl:href="http://pandoc.org/">Pandoc</link></emphasis> - A universal document converter.<?asciidoc-br?></simpara>
</section>
</appendix>
</book>
